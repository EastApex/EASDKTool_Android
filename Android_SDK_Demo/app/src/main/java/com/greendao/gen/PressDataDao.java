package com.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.apex.sdk.db.pressure.PressData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRESS_DATA".
*/
public class PressDataDao extends AbstractDao<PressData, Long> {

    public static final String TABLENAME = "PRESS_DATA";

    /**
     * Properties of entity PressData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Press_value = new Property(0, int.class, "press_value", false, "PRESS_VALUE");
        public final static Property CurrentTime = new Property(1, long.class, "currentTime", true, "_id");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
    }


    public PressDataDao(DaoConfig config) {
        super(config);
    }
    
    public PressDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRESS_DATA\" (" + //
                "\"PRESS_VALUE\" INTEGER NOT NULL ," + // 0: press_value
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: currentTime
                "\"LEVEL\" INTEGER NOT NULL );"); // 2: level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRESS_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PressData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPress_value());
        stmt.bindLong(2, entity.getCurrentTime());
        stmt.bindLong(3, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PressData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPress_value());
        stmt.bindLong(2, entity.getCurrentTime());
        stmt.bindLong(3, entity.getLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public PressData readEntity(Cursor cursor, int offset) {
        PressData entity = new PressData( //
            cursor.getInt(offset + 0), // press_value
            cursor.getLong(offset + 1), // currentTime
            cursor.getInt(offset + 2) // level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PressData entity, int offset) {
        entity.setPress_value(cursor.getInt(offset + 0));
        entity.setCurrentTime(cursor.getLong(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PressData entity, long rowId) {
        entity.setCurrentTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PressData entity) {
        if(entity != null) {
            return entity.getCurrentTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PressData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
